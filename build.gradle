plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'org.jetbrains.kotlin.kapt' version "1.3.72"
    id 'application'
    id 'org.mikeneck.graalvm-native-image' version '0.5.0'
}

ext {
    projectVersion = System.getenv('PROJECT_VERSION') == null?
            '0':
            "${System.getenv('PROJECT_VERSION')}"
}

repositories {
    mavenCentral()
    jcenter()
}

group = 'org.mikeneck.instant'
version = projectVersion

dependencies {
    kapt 'info.picocli:picocli-codegen:4.2.0'

    implementation platform('org.jetbrains.kotlin:kotlin-bom')
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'info.picocli:picocli:4.2.0'

    testImplementation 'run.ktcheck:ktcheck:v0.1.0'
}

application {
    mainClassName = 'org.mikeneck.instant.AppKt'
}

test {
    useJUnitPlatform()
}

kapt {
    arguments {
        arg("project", "${project.group}/${project.name}")
    }
}

task generateResource(group: 'build') {
    def outputDir = tasks.processResources.destinationDir
    def resourceFile = file("$outputDir/AppVersion.properties")
    outputs.file(resourceFile)
    doLast {
        resourceFile.write("""|#application version
           |app.version=${projectVersion}
           |""".stripMargin())
    }
}

tasks.processResources.finalizedBy("generateResource")

task appCopy(type: Copy, group: 'build') {
    from configurations.runtimeClasspath.asFileTree
    from jar
    destinationDir file("$buildDir/jars")
}

task showCommand(dependsOn: 'appCopy', group: 'application') {
    doLast {
        println("java -cp ${project.fileTree("$buildDir/jars").asPath} ${application.mainClassName}")
    }
}

nativeImage {
    graalVmHome = "${System.getProperty('java.home')}"
    mainClass = application.mainClassName
    executableName = 'instant'
    arguments(
            '--no-fallback'
    )
}

task zipNativeImage(type: Zip, dependsOn: "nativeImage", group: 'release') {
    def runOs = System.getenv('RUNNING_OS')
    def destinationDirName = runOs == null? "${project.name}": "${project.name}-$runOs"
    from(tasks.nativeImage)
    destinationDir(file("$buildDir/release"))
    archiveName("$destinationDirName-${project.version}.zip")
}
